# This file contains common pin mappings for the BigTreeTech Octopus V1.
# To use this config, the firmware should be compiled for the STM32F446 with a "32KiB bootloader"
# Enable "extra low-level configuration options" and select the "12MHz crystal" as clock reference

# after running "make", copy the generated "klipper/out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the OctoPus with that SD card.

# See docs/Config_Reference.md for a description of parameters.

## Voron Design VORON2 250/300/350mm BigTreeTech OctoPus V1 TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths                            [mcu] section
## Thermistor types                     [extruder] and [heater_bed] sections - See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types
## Hotend heater pin                    [extruder] section
## Z Endstop Switch location            [safe_z_home] section
## Homing end position                  [gcode_macro G32] section
## Z Endstop Switch  offset for Z0      [stepper_z] section
## Stepper Z1 enable pin                [stepper_z1] section
## Probe points                         [quad_gantry_level] section
## Min & Max gantry corner postions     [quad_gantry_level] section
## PID tune                             [extruder] and [heater_bed] sections
## Probe pin                            [probe] section
## Fine tune E steps                    [extruder] section

[mcu]
##  Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
#serial: /dev/serial/by-id/{REPLACE WITH YOUR SERIAL}
canbus_UUID: 5dfb942ea346
#restart_method: command
[exclude_object]

##--------------------------------------------------------------------
[mcu EBBCan]
#serial: /dev/serial/by-id/usb-Klipper_Klipper_firmware_12345-if00
canbus_UUID: 7f2c388ab2ca
[printer]
kinematics: corexy
max_velocity: 300  
max_accel: 3000             #Max 4000
max_z_velocity: 15          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0

#####################################################################
#   X/Y Stepper Settings
#####################################################################

##  B Stepper - Left
##  Connected to MOTOR_0
##  Endstop connected to DIAG_0
[stepper_x]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:400  #set to 400 for 0.9 degree stepper
endstop_pin: PG6
position_min: 0
##--------------------------------------------------------------------

##  Uncomment below for 250mm build
#position_endstop: 250
#position_max: 250

##  Uncomment for 300mm build
#position_endstop: 300
#position_max: 300

##  Uncomment for 350mm build
position_endstop: 350
position_max: 350

##--------------------------------------------------------------------
homing_speed: 50   #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PC4
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  A Stepper - Right
##  Connected to MOTOR_1
##  Endstop connected to DIAG_1
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:400  #set to 400 for 0.9 degree stepper
endstop_pin: PG9
position_min: 0
##--------------------------------------------------------------------

##  Uncomment for 250mm build
#position_endstop: 250
#position_max: 250

##  Uncomment for 300mm build
#position_endstop: 300
#position_max: 300

##  Uncomment for 350mm build
position_endstop: 350
position_max: 350

##--------------------------------------------------------------------
homing_speed: 50  #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PD11
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
 
#####################################################################
#   Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left
##  Connected to MOTOR_2
##  Endstop connected to DIAG_2
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
endstop_pin: probe:z_virtual_endstop
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_endstop: -0.5
##--------------------------------------------------------------------

##  Uncomment below for 250mm build
#position_max: 210

##  Uncomment below for 300mm build
#position_max: 260

##  Uncomment below for 350mm build
position_max: 310

##--------------------------------------------------------------------
position_min: -5
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PC6
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z1 Stepper - Rear Left
##  Connected to MOTOR_3
[stepper_z1]
step_pin: PG4
dir_pin: !PC1
## Octopus 1.0 & 1.1.  Octopus PRO 1.0
enable_pin: !PA0
## Octopus PRO 1.1
#enable_pin: !PA2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z2 Stepper - Rear Right
##  Connected to MOTOR_4
[stepper_z2]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z3 Stepper - Front Right
##  Connected to MOTOR_5
[stepper_z3]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z3]
uart_pin: PE4
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0


#####################################################################
#   Extruder
#####################################################################

##  Connected to MOTOR_6
##  Heater - HE0
##  Thermistor - T0
[extruder]
#step_pin: PE2
#dir_pin: PE3
#enable_pin: !PD4
##  Update value below when you perform extruder calibration
##  If you ask for 100mm of filament, but in reality it is 98mm:
##  rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
rotation_distance: 22.6789511   #Bondtech 5mm Drive Gears
##  Update Gear Ratio depending on your Extruder Type
##  Use 50:10 for Stealthburner/Clockwork 2
##  Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
##  Use 80:20 for M4, M3.1
gear_ratio: 50:10
microsteps: 32
full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
## Octopus 1.0 & 1.1.  Octopus PRO 1.0
#heater_pin: PA2
## Octopus PRO 1.1
#heater_pin: PA0
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for NTC 100k 3950 thermistors
#sensor_type:
#sensor_pin: PF4
#min_temp: 10
#max_temp: 270
max_power: 1.0
min_extrude_temp: 170
#control: pid
#pid_Kp: 21.527
#pid_Ki: 1.063
#pid_Kd: 108.982
min_temp: 10
max_temp: 250
##  Try to keep pressure_advance below 1.0
pressure_advance: 0.05
##  Default is 0.040, leave stock
pressure_advance_smooth_time: 0.040

##  E0 on MOTOR6
##  Make sure to update below for your relevant driver (2208 or 2209)
#[tmc2209 extruder]
#uart_pin: PE1
#interpolate: false
#run_current: 0.5
##stealthchop_threshold: 0


#####################################################################
#   Bed Heater
#####################################################################

##  SSR Pin - HE1
##  Thermistor - TB
[heater_bed]
##  Uncomment the following line if using the default SSR wiring from the docs site
#heater_pin: PA3
##  Other wiring guides may use BED_OUT to control the SSR. Uncomment the following line for those cases
heater_pin: PA1
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for Keenovo heaters
sensor_type:Generic 3950
sensor_pin: PF3
##  Adjust max_power so it doesn't exceed the SSR rating. The Omron G3NA-210B-DC5 SSR is rated at 4 amps without a heatsink.
##  The formula is "4 / (Wattage_of_bed_heater / Mains_voltage) = max_power"
##  If max_power is greater than 1.0, use 1.0
max_power: 1.0
min_temp: 0
max_temp: 120                                                
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769
#####################################################################
#     HEATSENSOR
######################################################################
[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100





#####################################################################
#   Probe                                                       
#####################################################################

##  Inductive Probe
##  This probe is not used for Z height, only Quad Gantry Leveling
[probe]

#--------------------------------------------------------------------

## Select the probe port by type:
## For the PROBE port. Will not work with Diode. May need pull-up resistor from signal to 24V.
#pin: ~!PB7
## For the DIAG_7 port. NEEDS BAT85 DIODE! Change to !PG15 if probe is NO.
#pin: PG15
## For Octopus Pro PROBE port; NPN and PNP proximity switch types can be set by jumper
#pin: ~!PC5

#--------------------------------------------------------------------
pin: !EBBCan:gpio21
x_offset: 0
y_offset: 0
z_offset: 0
speed: 10.0
samples: 3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.006
samples_tolerance_retries: 3
activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}
   
#####################################################################
#   Fan Control
#####################################################################

##  Print Cooling Fan - FAN0

##  Controller fan - FAN2
[controller_fan controller_fan]
pin: PD12
kick_start_time: 0.5
heater: heater_bed

##  Exhaust fan - FAN3
[heater_fan exhaust_fan]
pin: PD14
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 5.0
heater: heater_bed
heater_temp: 60
fan_speed: 1.0
[heater_fan nevermore]
pin: PD13
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 5.0
heater: heater_bed
heater_temp: 60
fan_speed: 1.0
#####################################################################
#   LED Control
#####################################################################

## Chamber Lighting - HE2 Connector (Optional)
#[output_pin caselight]
##Octopus 1.0 & 1.1, Octopus PRO 1.0
#pin: PB10
##Octopus PRO 1.1
#pin: PB0
#pwm:true
#shutdown_value: 0
#value:1
#cycle_time: 0.01

#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

[safe_z_home]
##  XY Location of the Z Endstop Switch
##  Update -10,-10 to the XY coordinates of your endstop pin 
##  (such as 157,305) after going through Z Endstop Pin
##  Location Definition step.
home_xy_position:175,175
speed:100
z_hop:10


##  Use QUAD_GANTRY_LEVEL to level a gantry.
##  Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##  MAX (250, 250), (300,300), or (350,350) depending on your printer size
##  to respective belt positions
[quad_gantry_level]

#--------------------------------------------------------------------
##  Gantry Corners for 250mm Build
##  Uncomment for 250mm build
#gantry_corners:
#   -60,-10
#   310, 320
##  Probe points
#points:
#   50,25
#   50,175
#   200,175
#   200,25
    
##  Gantry Corners for 300mm Build
##  Uncomment for 300mm build
#gantry_corners:
#   -60,-10
#   360,370
##  Probe points
#points:
#   50,25
#   50,225
#   250,225
#   250,25

##  Gantry Corners for 350mm Build
##  Uncomment for 350mm build
gantry_corners:
   -60,-10
   410,420
##  Probe points
points:
   50,25
   50,275
   300,275
   300,25

#--------------------------------------------------------------------
speed: 100
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

#####################################################################
#   Displays
#####################################################################

##  Uncomment the display that you have
#--------------------------------------------------------------------


##  RepRapDiscount 128x64 Full Graphic Smart Controller
#[display]
#lcd_type: st7920
#cs_pin: EXP1_4
#sclk_pin: EXP1_5
#sid_pin: EXP1_3
#menu_timeout: 40
#encoder_pins: ^EXP2_5, ^EXP2_3
#click_pin: ^!EXP1_2

#[output_pin beeper]
#pin: EXP1_1

#--------------------------------------------------------------------


##  mini12864 LCD Display
#[display]
#lcd_type: uc1701
#cs_pin: EXP1_3
#a0_pin: EXP1_4
#rst_pin: EXP1_5
#encoder_pins: ^EXP2_5, ^EXP2_3
#click_pin: ^!EXP1_2
#contrast: 63
#spi_software_miso_pin: EXP2_1
#spi_software_mosi_pin: EXP2_6
#spi_software_sclk_pin: EXP2_2

##  To control Neopixel RGB in mini12864 display
#[neopixel btt_mini12864]
#pin: EXP1_6
#chain_count: 3
#initial_RED: 0.1
#initial_GREEN: 0.5
#initial_BLUE: 0.0
#color_order: RGB

##  Set RGB values on boot up for each Neopixel. 
##  Index 1 = display, Index 2 and 3 = Knob
#[delayed_gcode setdisplayneopixel]
#initial_duration: 1
#gcode:
#        SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
#        SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
#        SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 

#--------------------------------------------------------------------
[bed_mesh]
speed: 300
horizontal_move_z: 10
##--------------------------------------------------------------------
##	Uncomment below for 250mm build
#mesh_min: 40, 40
#mesh_max: 210,210
#zero_reference_position: 125,125 #for use with stock z endstop

##	Uncomment for 300mm build
#mesh_min: 40, 40
#mesh_max: 260,260
#zero_reference_position: 150,150 #for use with stock z endstop

##	Uncomment for 350mm build
mesh_min: 40, 40
mesh_max: 310,310
zero_reference_position: 175,175 #for use with stock z endstop

##--------------------------------------------------------------------
fade_start: 0.6
fade_end: 10.0
probe_count: 5,5 # Values should be odd, so one point is directly at bed center
algorithm: bicubic


#####################################################################
#   Macros
#####################################################################
[include fluidd.cfg]
[include mainsail.cfg]
[include EBBCan.cfg]
[include demon_z_calibration_v1.3.cfg]
[include demon_user_settings_v2.6.cfg]
[include demon_setup_helpers_v1.3.cfg]
#[include demon_print_start_end_v2.6.cfg]
[include demon_prepare_menu_v1.0.cfg]
[include demon_mesh_builder_v1.0.cfg]
[include demon_clean_load_v1.3.cfg]
[include demon_adaptive_pa_v1.0.cfg]
[include stealthburner_leds.cfg]
[include config_backup.cfg]
[include leds.cfg]

[gcode_macro _HEAT_WAIT]
description: Heating cycle waiting routine
gcode:
    {% set MINUTES = params.MINUTES|default(10)|int %}
    {% set MSG = params.MSG|default("Warming...")|string %}
    {% for i in range(0, MINUTES) %}
        M117 {MSG} {MINUTES-i} minute remaining.
        {% for s in range(0, 60) %}
            SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=0 BLUE=0
            SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
            G4 P500
            SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
            SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=0 BLUE=0
            G4 P500
        {% endfor %}
    {% endfor %}
[gcode_macro _WAIT_Variable]
variable_count: 300
variable_duration: 2
variable_waiting: False
# Total wait minutes is (duration * count) / 60 
gcode:

[delayed_gcode WAIT_Delayed]
gcode:
    {% set count = printer["gcode_macro _WAIT_Variable"].count|int %}
    {% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
    M117 Pre-Print Heatsoaking... {((duration * count) / 60)|round(1)} minutes left.
    SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE={count-1}
    {% if count > 0 %} _WAIT_Loop  {% endif %}
    {% if count == 0 %} 
        # FINAL ACION
        SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=waiting VALUE=False
        M118 Reached the end, do final action
        # FINAL ACION
    {% endif %}

[gcode_macro _WAIT_Loop]
gcode:
    {% set count = printer["gcode_macro _WAIT_Variable"].count|int %}
    {% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
    UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION={duration}
    {% if  count % 2 == 0 %}
        SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=0 BLUE=0
        SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
      {% else %}
        SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
        SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=0 BLUE=0
    {% endif %}

[gcode_macro WAIT_Start]
gcode:
    {% set MINUTES = params.MINUTES|default(15)|int %}
    {% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
    {% set count = (MINUTES * 60) / duration %}
    SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=waiting VALUE=True
    SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE={count}
    UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION={duration}

[gcode_macro WAIT_Quit]
gcode:
    {% if printer["gcode_macro _WAIT_Variable"].waiting %}
        M118 STOPPING LOOP, SETTING COUNT TO 0
        SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE=0
        UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION=1
      {% else %}
        M118 Not in waiting state, nothing to do.
    {% endif %}

[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32
   

[gcode_macro PRINT_START]
gcode:
# Do not edit this section, this gets the info from the print file
  {% set first_layer_bed = params.BED|int %}
  {% set first_layer_extruder = params.EXTRUDER|float %}
  {% set layer_height = params.LAYER|default(0.2)|float %}
  {% set filament_type = params.FILAMENT|default('PLA')|string %}
  {% set extrusion_width = params.EXTRUSION|default(0.4)|float %}
  {% set exclude_object = params.EXCLUDE|default(0)|int %} 
  {% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float / 2 %}

  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set cs_vars = printer["gcode_macro _CHAMBER_SENSOR_VARS"] %}
  
## PREPARE ####################################################################################################################################

  {% if start_vars.orca_enable == True %}
    SET_GCODE_VARIABLE MACRO=_APA_VARS VARIABLE=fil_type VALUE='"{filament_type}"'
    _APA_SET
  {% endif %}


  {% if start_vars.orca_enable == True %}
    {% if start_vars.adaptive_meshing == True and exclude_object != 1%}
      {action_raise_error("This error is caused by the sliced file not having EXCLUDE_OBJECT enabled! Please disable Adaptive_Meshing in the user_settings.cfg or re-slice the file with it enabled and restart the print!")}
    {% endif %}
  {% endif %}
  
  {% if start_vars.printer_lights == True %}  
    {% if printer["Printer_Lights"] != start_vars.printer_lights_print %}
      SET_PIN PIN=Printer_Lights VALUE={start_vars.printer_lights_print}
    {% endif %}
  {% endif %}
  
    STATUS_BUSY

## STATE RESET TO PRINT ############################################################################################################################
    
    G90 ; Use absoulte coordinates
    M83 ; Extruder relative mode
    SET_GCODE_OFFSET Z=0.0 # Reset the G-Code Z offset
    BED_MESH_CLEAR       # Clears currently loaded mesh    

## INITIAL SETUP ############################################################################################################################
  
    M220 S{start_vars.feed_rate}
 
  {% if filament_type in ['PLA', 'PLA+'] and layer_height|float <0.25%}
    M221 S{start_vars.pla_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.pla_pa} SMOOTH_TIME={start_vars.pla_st}

  {% elif filament_type == 'ASA' and layer_height|float <0.25%}
    M221 S{start_vars.asa_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.asa_pa} SMOOTH_TIME={start_vars.asa_st}

  {% elif filament_type == 'ABS' and layer_height|float <0.25%}
    M221 S{start_vars.abs_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.abs_pa} SMOOTH_TIME={start_vars.abs_st}

  {% elif filament_type in ['PET', 'PETG'] and layer_height|float <0.25%}
    M221 S{start_vars.petg_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.petg_pa} SMOOTH_TIME={start_vars.petg_st}   

  {% elif filament_type in ['FLEX', 'TPU'] and layer_height|float <0.25%}
    M221 S{start_vars.tpu_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.tpu_pa} SMOOTH_TIME={start_vars.tpu_st}  


  {% elif filament_type in ['PLA', 'PLA+'] and layer_height|float >0.26%}
    M221 S{start_vars.pla_hi_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.pla_pa} SMOOTH_TIME={start_vars.pla_st}

  {% elif filament_type == 'ASA' and layer_height|float >0.26%}
    M221 S{start_vars.asa_hi_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.asa_pa} SMOOTH_TIME={start_vars.asa_st}

  {% elif filament_type == 'ABS' and layer_height|float >0.26%}
    M221 S{start_vars.abs_hi_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.abs_pa} SMOOTH_TIME={start_vars.abs_st}

  {% elif filament_type in ['PET', 'PETG'] and layer_height|float >0.26%}
    M221 S{start_vars.petg_hi_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.petg_pa} SMOOTH_TIME={start_vars.petg_st}
   
  {% elif filament_type in ['FLEX', 'TPU'] and layer_height|float >0.26%}
    M221 S{start_vars.tpu_hi_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.tpu_pa} SMOOTH_TIME={start_vars.tpu_st}  

  {% endif %}

## FILAMENT STATE CHECK ############################################################################################################################

  {% if start_vars.runout_sensor == True %}
    {% if not printer["filament_switch_sensor filament_sensor"].filament_detected %} # Runout Sensor Check, E-Stop if empty! 
      {action_raise_error("This error is caused by no filament loaded! Please load filament & restart the print!")}

    {% endif %}
 
  {% endif %}

  {% if start_vars.encoder_runout_sensor == True %}
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
  {% endif %}

  ## CHAMBER FAN SETTING ############################################################################################################################

  {% if start_vars.chamber_fan == True %}

    {% if filament_type in ['PLA', 'PLA+'] %}        
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.pla_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: PLA {start_vars.pla_chamber_temp}c"
      
    {% elif filament_type == 'ASA' %} 
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.asa_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: ASA {start_vars.asa_chamber_temp}c"

    {% elif filament_type == 'ABS' %} 
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.abs_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: ABS {start_vars.abs_chamber_temp}c"

    {% elif filament_type in ['PET', 'PETG'] %} 
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.petg_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: PETG {start_vars.petg_chamber_temp}c"

    {% elif filament_type in ['FLEX', 'TPU'] %} 
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.tpu_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: TPU {start_vars.tpu_chamber_temp}c"

    {% else %} 
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.default_chamber_temp}  
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: Default {start_vars.default_chamber_temp}c"

    {% endif %}

  {% endif %}
  
  ## BED FANS SETTINGS ##############################################################################################################################

  {% if start_vars.bed_fans == True %}

    {% if filament_type in ['PLA', 'PLA+'] %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.lo_heat_soak_threshold}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.pla_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.pla_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.pla_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.pla_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.pla_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      M400

    {% elif filament_type == 'ASA' %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.hi_heat_soak_threshold}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.asa_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.asa_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.asa_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.asa_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.asa_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      M400

    {% elif filament_type == 'ABS' %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.hi_heat_soak_threshold}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.abs_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.abs_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.abs_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.abs_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.abs_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      M400

    {% elif filament_type in ['PET', 'PETG'] %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.lo_heat_soak_threshold}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.petg_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.petg_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.petg_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.petg_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.petg_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      M400    

    {% elif filament_type in ['FLEX', 'TPU'] %} 
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.lo_heat_soak_threshold}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.tpu_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.tpu_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.tpu_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.tpu_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.tpu_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      M400

    {% else %}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_threshold VALUE={start_vars.default_heat_soak_threshold}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan VALUE={start_vars.default_chamber_temp}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=low VALUE={start_vars.default_bed_fan_low_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=high VALUE={start_vars.default_bed_fan_high_speed}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool VALUE={start_vars.default_bed_fan_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=cool_temp VALUE={start_vars.post_print_cool}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=enable VALUE={start_vars.default_bed_fan_enable}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=chamber_fan_enable VALUE={start_vars.chamber_fan}
      M400

    {% endif %}

  {% endif %}



## INITIAL BED HEATING ############################################################################################################################

    STATUS_HEATING
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={first_layer_bed} 
    
  {% if start_vars.bed_fans == True %}
   _BED_FAN_READ
   _BED_FAN_SET
  {% endif %}

## NOZZLE PREHEATING ############################################################################################################################

  {% if filament_type in ['PLA', 'PLA+'] %} 
    SET_DISPLAY_TEXT MSG="PLA File Detected Hotend Preheat: {start_vars.pla_noz_pre}c"          # Displays info 
    RESPOND TYPE=COMMAND MSG="PLA File Detected Hotend Preheat: {start_vars.pla_noz_pre}c"          # Displays info 
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={start_vars.pla_noz_pre} 
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={start_vars.pla_noz_pre|float -2} MAXIMUM={start_vars.pla_noz_pre|float + 5}
  
  {% elif filament_type == 'ASA' %} 
    SET_DISPLAY_TEXT MSG="ASA File Detected Hotend Preheat: {start_vars.asa_noz_pre}c"          # Displays info 
    RESPOND TYPE=COMMAND MSG="ASA File Detected Hotend Preheat: {start_vars.asa_noz_pre}c"          # Displays info 
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={start_vars.asa_noz_pre} 
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={start_vars.asa_noz_pre|float -2} MAXIMUM={start_vars.asa_noz_pre|float + 5}    
  
  {% elif filament_type == 'ABS' %} 
    SET_DISPLAY_TEXT MSG="ABS File Detected Hotend Preheat: {start_vars.abs_noz_pre}c"          # Displays info 
    RESPOND TYPE=COMMAND MSG="ABS File Detected Hotend Preheat: {start_vars.abs_noz_pre}c"          # Displays info 
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={start_vars.abs_noz_pre} 
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={start_vars.abs_noz_pre|float -2} MAXIMUM={start_vars.abs_noz_pre|float + 5}    

  {% elif filament_type in ['PET', 'PETG'] %}
    SET_DISPLAY_TEXT MSG="PETG File Detected Hotend Preheat: {start_vars.petg_noz_pre}c"          # Displays info 
    RESPOND TYPE=COMMAND MSG="PETG File Detected Hotend Preheat: {start_vars.petg_noz_pre}c"          # Displays info 
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={start_vars.petg_noz_pre} 
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={start_vars.petg_noz_pre|float -2} MAXIMUM={start_vars.petg_noz_pre|float + 5}

  {% elif filament_type in ['FLEX', 'TPU'] %}
    SET_DISPLAY_TEXT MSG="TPU File Detected Hotend Preheat: {start_vars.tpu_noz_pre}c"          # Displays info 
    RESPOND TYPE=COMMAND MSG="TPU File Detected Hotend Preheat: {start_vars.tpu_noz_pre}c"          # Displays info 
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={start_vars.tpu_noz_pre} 
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={start_vars.tpu_noz_pre|float -2} MAXIMUM={start_vars.tpu_noz_pre|float + 5}

  {% elif not filament_type in ['PLA', 'PLA+', 'ASA', 'ABS', 'PET', 'PETG', 'FLEX', 'TPU'] %}
    {% if params.EXTRUDER|float <220 %}
      SET_DISPLAY_TEXT MSG="Hotend Preheat by file temp: {start_vars.default_lo_noz_pre}c"          # Displays info        
      RESPOND TYPE=COMMAND MSG="Hotend Preheat by file temp: {start_vars.default_lo_noz_pre}c"          # Displays info        
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={start_vars.default_lo_noz_pre} 
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={start_vars.default_lo_noz_pre|float -2} MAXIMUM={start_vars.default_lo_noz_pre|float + 5}

    {% else %}
      SET_DISPLAY_TEXT MSG="Hotend Preheat by file temp: {start_vars.default_hi_noz_pre}c"          # Displays info          
      RESPOND TYPE=COMMAND MSG="Hotend Preheat by file temp: {start_vars.default_hi_noz_pre}c"          # Displays info      
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={start_vars.default_hi_noz_pre} 
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={start_vars.default_hi_noz_pre|float -2} MAXIMUM={start_vars.default_hi_noz_pre|float + 5}

    {% endif %}  

  {% endif %}

    M400

## HOMING ############################################################################################################################

  {% if "xyz" not in printer.toolhead.homed_axes %}
    STATUS_HOMING
    SET_DISPLAY_TEXT MSG="Homing..."
    RESPOND TYPE=COMMAND MSG="Homing..."
    G28

  {% else %}
    {% if start_vars.klicky_probe == True %}
      _klicky_check
    {% endif %}
  {% endif %}

    M400
    CLEAN_NOZZLE 

   
## NEVERMORE START SETTING ##############################################################################################################################

  {% if start_vars.nevermore == True %}

    {% if filament_type in ['PLA', 'PLA+'] %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.pla_nevermore_start_speed}

    {% elif filament_type == 'ASA' %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.asa_nevermore_start_speed}

    {% elif filament_type == 'ABS' %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.abs_nevermore_start_speed}

    {% elif filament_type in ['PET', 'PETG'] %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.petg_nevermore_start_speed}

    {% elif filament_type in ['FLEX', 'TPU'] %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.tpu_nevermore_start_speed}

    {% else %}
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.default_nevermore_start_speed}

    {% endif %}

  {% endif %}
  
## STORED BED MESH OR ADAPTIVE ##########################################################################################################################

  {% if start_vars.adaptive_meshing == True %}
   
  {% else %}  

    {% if filament_type in ['PLA', 'PLA+'] %}        
      BED_MESH_PROFILE LOAD="default"
      RESPOND TYPE=COMMAND MSG="Default mesh loaded"

    {% elif filament_type == 'ASA' %} 
      BED_MESH_PROFILE LOAD="ASA"
      SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=offset_reset VALUE=True
      RESPOND TYPE=COMMAND MSG="ASA mesh loaded"
    
    {% elif filament_type == 'ABS' %} 
      BED_MESH_PROFILE LOAD="ABS"
      SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=offset_reset VALUE=True
      RESPOND TYPE=COMMAND MSG="ABS mesh loaded"
    
    {% elif filament_type in ['PET', 'PETG'] %}  
      BED_MESH_PROFILE LOAD="PETG"  
      SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=offset_reset VALUE=True
      RESPOND TYPE=COMMAND MSG="PETG mesh loaded"
    
    {% elif filament_type in ['FLEX', 'TPU'] %}  
      BED_MESH_PROFILE LOAD="TPU"  
      SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=offset_reset VALUE=True
      RESPOND TYPE=COMMAND MSG="TPU mesh loaded"

    {% else %}    

      {% if params.BED|float < 90 %}
        BED_MESH_PROFILE LOAD="default"
        RESPOND TYPE=COMMAND MSG="Default mesh by temp loaded"

      {% else %}
        BED_MESH_PROFILE LOAD="ASA" 
        SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=offset_reset VALUE=True
        RESPOND TYPE=COMMAND MSG="ASA mesh by temp loaded"

      {% endif %}    

    {% endif %}
    
  {% endif %}

## APPLY OFFSET ADJUSTMENTS ############################################################################################################################

## Use with EXTREME caution!! Manual G-Code Z offset override!

  {% if start_vars.high_temp_expansion_offset and filament_type in ['ASA', 'ABS'] %}
    {% if start_vars.high_temp_offset >= -0.1 and start_vars.high_temp_offset <= 0.1%}
      SET_GCODE_OFFSET Z_ADJUST={start_vars.high_temp_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
      SET_DISPLAY_TEXT MSG="REQUESTED HIGH TEMP OFFSET ADJUSTMENT APPLIED"
      RESPOND TYPE=echo MSG="REQUESTED HIGH TEMP OFFSET ADJUSTMENT APPLIED"
      G4 P10000

    {% else %}
      {action_emergency_stop("EMERGENCY STOP! EXCESSIVE HIGH TEMP OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    
    {% endif %}    

  {% elif start_vars.petg_anti_squish == True and filament_type in ['PET', 'PETG'] %}
    {% if start_vars.petg_offset >= 0.0 and start_vars.petg_offset <= 0.1%}
      SET_GCODE_OFFSET Z_ADJUST={start_vars.petg_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
      SET_DISPLAY_TEXT MSG="REQUESTED PETG OFFSET ADJUSTMENT APPLIED"
      RESPOND TYPE=echo MSG="REQUESTED PETG OFFSET ADJUSTMENT APPLIED"
      G4 P10000

    {% else %}
      {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE PETG OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    
    {% endif %}  

  {% endif %}

## BED TEMP WAITS & TIMERS ############################################################################################################################

    STATUS_HEATING 

    SET_DISPLAY_TEXT MSG="Waiting For Bed Temp: {first_layer_bed}c"                
    RESPOND TYPE=COMMAND MSG="Waiting For Bed Temp: {first_layer_bed}c"             
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={first_layer_bed} 
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={first_layer_bed|int -2} MAXIMUM={first_layer_bed|int + 5}
    RESPOND TYPE=COMMAND MSG="Bed Temp Reached"

  {% if start_vars.bed_fans == True %}
    _BED_FAN_SET
    M400
  {% endif %}

  {% if start_vars.chamber_fan or start_vars.chamber_sensor == True %} 
    {% if filament_type in ['PLA', 'PLA+', 'PET', 'PETG', 'FLEX', 'TPU'] %}
      {% if start_vars.chamber_fan == True %} ##
        {% if printer["temperature_fan chamber"].temperature <start_vars.lo_heat_soak_threshold %}
          {% if start_vars.chamber_temp_wait == True %}
            G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
            SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {start_vars.lo_heat_soak_threshold}c"
            RESPOND TYPE=COMMAND MSG="Waiting For Chamber Temp: {start_vars.lo_heat_soak_threshold}c"
            TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={start_vars.lo_heat_soak_threshold|float}
            RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"
          {% else %}
             G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
            _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}
            RESPOND TYPE=COMMAND MSG="Running Low Temp Chamber Timer via sensor"
          {% endif %} 

        {% else %}
          SET_DISPLAY_TEXT MSG="Already up to {filament_type} temp, heat soak skipped"
          RESPOND TYPE=COMMAND MSG="Already up to {filament_type} temp, heat soak skipped"
          G4 P5000
        {% endif %} 

      {% elif start_vars.chamber_sensor == True %} ##  
        {% if printer["temperature_sensor Chamber_Temp"].temperature <start_vars.lo_heat_soak_threshold %}
          {% if start_vars.chamber_temp_wait == True %}
            G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
            SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {start_vars.lo_heat_soak_threshold}c"
            RESPOND TYPE=COMMAND MSG="Waiting For Chamber Temp: {start_vars.lo_heat_soak_threshold}c"
            TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Temp" MINIMUM={start_vars.lo_heat_soak_threshold|float}
            RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"
          {% else %}
             G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
            _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}
            RESPOND TYPE=COMMAND MSG="Running Low Temp Chamber Timer via sensor"
          {% endif %} 

        {% else %}
          SET_DISPLAY_TEXT MSG="Already up to {filament_type} temp, heat soak skipped"
          RESPOND TYPE=COMMAND MSG="Already up to {filament_type} temp, heat soak skipped"
          G4 P5000
        {% endif %} 
      
      {% endif %}
      

    {% elif filament_type in ['ASA', 'ABS'] %}
      {% if start_vars.chamber_fan == True %} ## 
        {% if printer["temperature_fan chamber"].temperature <start_vars.hi_heat_soak_threshold %}
          {% if start_vars.chamber_temp_wait == True %}
            G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
            SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {start_vars.hi_heat_soak_threshold}c"
            RESPOND TYPE=COMMAND MSG="Waiting For Chamber Temp: {start_vars.hi_heat_soak_threshold}c"
            M106 S255 
            TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={start_vars.hi_heat_soak_threshold|float}
            RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"
          {% else %}
            M106 S255
            G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
            _HEAT_WAIT MINUTES={start_vars.hi_temp_timer} 
            RESPOND TYPE=COMMAND MSG="Running High Temp Chamber Timer via sensor"
          {% endif %}  

        {% else %}
          SET_DISPLAY_TEXT MSG="Already up to {filament_type} temp, heat soak skipped"
          RESPOND TYPE=COMMAND MSG="Already up to {filament_type} temp, heat soak skipped"
          G4 P5000
        {% endif %} 

      {% elif start_vars.chamber_sensor == True %} ##  
        {% if printer["temperature_sensor Chamber_Temp"].temperature <start_vars.hi_heat_soak_threshold %}
          {% if start_vars.chamber_temp_wait == True %}
            G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
            SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {start_vars.hi_heat_soak_threshold}c"
            RESPOND TYPE=COMMAND MSG="Waiting For Chamber Temp: {start_vars.hi_heat_soak_threshold}c"
            M106 S255 
            TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Temp" MINIMUM={start_vars.hi_heat_soak_threshold|float}
            RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"
          {% else %}
            M106 S255
            G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
            _HEAT_WAIT MINUTES={start_vars.hi_temp_timer} 
            RESPOND TYPE=COMMAND MSG="Running High Temp Chamber Timer via sensor"
          {% endif %}  

        {% else %}
          SET_DISPLAY_TEXT MSG="Already up to {filament_type} temp, heat soak skipped"
          RESPOND TYPE=COMMAND MSG="Already up to {filament_type} temp, heat soak skipped"
          G4 P5000
        {% endif %} 

      {% endif %}
      
         
    {% else %}
      {% if start_vars.chamber_fan == True %} ## 
        {% if printer["temperature_fan chamber"].temperature <start_vars.default_heat_soak_threshold %}
          _HEAT_WAIT MINUTES={start_vars.default_temp_timer}
          {% if start_vars.chamber_temp_wait == True %}
            G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
            SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {start_vars.default_heat_soak_threshold}c"
            RESPOND TYPE=COMMAND MSG="Waiting For Chamber Temp: {start_vars.default_heat_soak_threshold}c"
            TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={start_vars.default_heat_soak_threshold|float} 
            RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"
            
          {% elif start_vars.chamber_temp_wait == False %} 
            G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
            _HEAT_WAIT MINUTES={start_vars.default_temp_timer}
            RESPOND TYPE=COMMAND MSG="Running Default Temp Chamber Timer via sensor"
          {% endif %}   
      
        {% else %}
          SET_DISPLAY_TEXT MSG="Already up to Default temp heat soak skipped"
          RESPOND TYPE=COMMAND MSG="Already up to {filament_type} temp, heat soak skipped"
          G4 P5000
        {% endif %}
 
      {% elif start_vars.chamber_sensor == True %} ## 
        {% if printer["temperature_sensor Chamber_Temp"].temperature <start_vars.default_heat_soak_threshold %}
          _HEAT_WAIT MINUTES={start_vars.default_temp_timer}
          {% if start_vars.chamber_temp_wait == True %}
            G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
            SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {start_vars.default_heat_soak_threshold}c"
            RESPOND TYPE=COMMAND MSG="Waiting For Chamber Temp: {start_vars.default_heat_soak_threshold}c"
            TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Temp" MINIMUM={start_vars.default_heat_soak_threshold|float} 
            RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"
            
          {% elif start_vars.chamber_temp_wait == False %} 
            G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
            _HEAT_WAIT MINUTES={start_vars.default_temp_timer}
            RESPOND TYPE=COMMAND MSG="Running Default Temp Chamber Timer via sensor"
          {% endif %}   
      
        {% else %}
          SET_DISPLAY_TEXT MSG="Already up to Default temp heat soak skipped"
          RESPOND TYPE=COMMAND MSG="Already up to {filament_type} temp, heat soak skipped"
          G4 P5000
        {% endif %}
       
      {% endif %}

    {% endif %}
   
  {% elif start_vars.chamber_fan and start_vars.chamber_sensor == False %}

    {% if filament_type in ['PLA', 'PLA+', 'PET', 'PETG', 'FLEX', 'TPU'] %} 
      RESPOND TYPE=COMMAND MSG="Running Low Temp Chamber Timer via Fliament Type"
      G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
      _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}     
    
    {% elif filament_type in ['ASA', 'ABS'] %}  
      RESPOND TYPE=COMMAND MSG="Running High Temp Chamber Timer via Fliament Type"
      G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
      # M106 S255
      _HEAT_WAIT MINUTES={start_vars.hi_temp_timer}  
       
    {% else %}
      {% if params.BED|float < 90 %}
        RESPOND TYPE=COMMAND MSG="Running Low Temp Chamber Timer via File Temps"
        G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed 
        _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}

      {% else %}
        RESPOND TYPE=COMMAND MSG="Running High Temp Chamber Timer via File Temps"
        G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
        # M106 S255
        _HEAT_WAIT MINUTES={start_vars.hi_temp_timer}
      {% endif %}
    
    {% endif %}
    
  {% endif %}

    M107                                                    # Turns off parts cooling fan

  {% if start_vars.bed_fans == True %}
    _BED_FAN_SET

  {% endif %}

## GANTRY LEVELLING ############################################################################################################################

    CLEAN_NOZZLE
    STATUS_LEVELING
    G28 Z
    SET_DISPLAY_TEXT MSG="Gantry Levelling" 
    RESPOND TYPE=COMMAND MSG="Gantry Levelling" 
    QUAD_GANTRY_LEVEL 
    CLEAN_NOZZLE
    G28 Z

  {% if start_vars.adaptive_meshing == True %}
    BED_MESH_CALIBRATE PROFILE=DAM ADAPTIVE=1 ADAPTIVE_MARGIN=10
  {% endif %}

## MOVE TO START POSITION & READY ############################################################################################################################
  
  {% if start_vars.start_x_position >= 50 or start_vars.start_y_position >= 50%}
    {action_emergency_stop("EMERGENCY STOP! EXCESSIVE START POSITION REQUESTED CORRECT IN USER SETTINGS FILE")}

  {% elif start_vars.purge_line_length|float > 150 %}
    {action_emergency_stop("EMERGENCY STOP! EXCESSIVE PURGE LENGTH REQUESTED CORRECT IN USER SETTINGS FILE")}
    
  {% endif %}

    SET_DISPLAY_TEXT MSG="Moving to Start Position"
    RESPOND TYPE=COMMAND MSG="Moving to Start Position"
    G0 Z25 F5000
    G0 X{start_vars.start_x_position} Y{start_vars.start_y_position} F5000 # Move to start position

    
    G0 Z5.0 F5000 # Lower speed
    G0 Z0.5 F150 # Lower slow for wait & to catch oozing nozzle during heating

    # Heats up the nozzle up to target via data from slicer
    SET_DISPLAY_TEXT MSG="Heating Hotend: {first_layer_extruder}c"
    RESPOND TYPE=COMMAND MSG="Heating Hotend: {first_layer_extruder}c"
    STATUS_HEATING                                              
 
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={first_layer_extruder} 
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={first_layer_extruder|float -2} MAXIMUM={first_layer_extruder|float + 5}
    
  ## NEVERMORE PRINT SETTING ##############################################################################################################################

  {% if start_vars.nevermore == True %}

    {% if filament_type in ['PLA', 'PLA+'] %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.pla_nevermore_print_speed}

    {% elif filament_type == 'ASA' %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.asa_nevermore_print_speed}

    {% elif filament_type == 'ABS' %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.abs_nevermore_print_speed}

    {% elif filament_type in ['PET', 'PETG'] %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.petg_nevermore_print_speed}

    {% elif filament_type in ['FLEX', 'TPU'] %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.tpu_nevermore_print_speed}

    {% else %}
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.default_nevermore_print_speed}

    {% endif %}

  {% endif %}

## PRINT PURGE LINES ############################################################################################################################

    STATUS_PRINTING
    _PURGE_LINES

  {% if start_vars.bed_fans == True %}
    UPDATE_DELAYED_GCODE ID=_BED_FAN_MONITOR DURATION=1
    RESPOND TYPE=COMMAND MSG="Bed Fans Monitor Active"
  {% endif %}

[gcode_macro _PURGE_LINES]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set height = (printer.configfile.settings.extruder.nozzle_diameter * 0.75)|float %} #0.625
  {% set width = (printer.configfile.settings.extruder.nozzle_diameter * 1.25)|float %}
  {% set filament_area = 3.14159 * (printer.configfile.settings.extruder.filament_diameter ** 2) / 4 %}
  {% set rate = start_vars.purge_line_length * ((width * height) / filament_area) %}

    SET_DISPLAY_TEXT MSG="Printing Purge Lines"
    RESPOND TYPE=COMMAND MSG="Printing Purge Lines"
    G90  # Absolute mode
    G0 Z1.5 F9000 # Jump up to leave ooze blob

    G91 # Relative mode
  {% if start_vars.purge_along_y == True %}
    G0 Y7 F9000 # Move away from ooze blob
  {% else %}
    G0 X7 F9000
  {% endif %}

    G90 # Absolute mode
    G0 Z{height} F1500    
    G91 # Relative mode
    
  {% if start_vars.purge_along_y == True %} 
    G1 Y{start_vars.purge_line_length} E{rate} F1500 # Draw the first line
    G0 X{width} F5000 # Move to side a little
    G1 Y-{start_vars.purge_line_length -15} E{rate} F1500
  # G4 P2000 # wait 02 seconds    

  {% else %}
    G1 X{start_vars.purge_line_length} E{rate} F1500 # Draw the first line
    G0 Y{width +0.4} F5000 # Move to side a little
    G1 X-{start_vars.purge_line_length -15} E{rate} F1500
  # G4 P2000 # wait 02 seconds 
  {% endif %}

    G0 Z{height} F9000 # Lift a little
    G0 X5 Y5 F9000 # Wipe Out
    G90 # Absolute mode
    G92 E0.0 # Reset Extruder
    M83 # Extruder relative mode
    G0 Z5.0 F9000 # Move Z Axis up little to prevent scratching of Heat Bed
    M400
    SET_DISPLAY_TEXT MSG="Print Start..."
    RESPOND TYPE=COMMAND MSG="Print Start..."

  {% if start_vars.encoder_runout_sensor == True %}
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
  {% endif %}  


#######################################################
# Used to finish your print & leave your printer in a safe state
#######################################################

[gcode_macro PRINT_END]
variable_offset_reset: False
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

    G91 # RELATIVE POSITIONING
    G1 E-2 F2700 # RETRACT A BIT
    G1 E-2 Z0.2 F2400 # RETRACT AND RAISE Z
    G0 X5 Y5 F9000 # WIPE OUT
    G90 # ABSOLUTE POSITIONING
  
  {% if printer.toolhead.position.z|float < 50 %}
    G0 Z50 F3600

  {% endif %}

  {% if offset_reset == True %}
    SET_GCODE_OFFSET Z=0.0 MOVE=1 # Reset the adjusted G-Code Z offset
  {% endif %}  

  {% if start_vars.chamber_fan == True %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.post_print_cool}    
  {% endif %}

  {% if start_vars.nevermore == True %}
    SET_FAN_SPEED fan_generic=nevermore SPEED=0                           
  {% endif %}

    SET_DISPLAY_TEXT MSG="Print Complete!"
    RESPOND TYPE=COMMAND MSG="Print Complete!"
    _TOOLHEAD_PARK_PAUSE_CANCEL # park head & present print

    # M104 S0 # kill extruder temperature
    # M140 S0 # kill bed temperature
    TURN_OFF_HEATERS

    M84 X Y E # DISABLE ALL STEPPERS BUT Z
    M220 S100 # reset feed rate to 100 percent
    M221 S100 # reset flow rate to 100 percent

    BED_MESH_CLEAR

  {% if start_vars.shutdown_relay == True %} 
    {% if printer["output_pin PRINTER_AUTO_OFF"].value == 1.0 %}
      _GOODNIGHT
   
    {% else %}
      M107 # kill fan
      M117
      STATUS_READY
    {% endif %}

  {% else %}
    M107 # kill fan
    M117
    STATUS_READY
  {% endif %}

  {% if start_vars.printer_lights == True %}  
    {% if printer["Printer_Lights"] != start_vars.printer_lights_finish %}
      SET_PIN PIN=Printer_Lights VALUE={start_vars.printer_lights_finish}
      status_off
    {% endif %}
  {% endif %}
  
; total layers count = [total_layer_count]




#######################################################
# Use this macro to calibrate your retractoin settings when using the generated files from http://www.retractioncalibration.com/
# All you need do is paste "_RET_CALI_START" into the website's "Custom Gcode" box next to the green "Generate Gcode" button
#######################################################

[gcode_macro _RET_CALI_START]
gcode:

    BED_MESH_PROFILE LOAD="default"
 
    CLEAN_NOZZLE
    SET_DISPLAY_TEXT MSG="Gantry Levelling"
    G28 Z
    QUAD_GANTRY_LEVEL 
    CLEAN_NOZZLE
    G28 Z

    STATUS_PRINTING

    M117 Start Position
    G0 X0.4 Y10 Z25 F5000

    G0 X0.4 Y10 Z5.0 F5000 # Move to start position
    G0 Z0.5 F150 # Lower to ready

    M117 Printing Purge Lines
    G0 Z1.5 F9000
    G0 Y17 F9000
    G0 Z0.5 F1500
    G0 Z0.30 F150 # Move lower to first layer height
    #G4 P2000 # wait 2 seconds

    G1 X0.4 Y150 F1500.0 E15 # Draw the first line
    G0 X0.7 Y150 F5000.0 # Move to side a little
    G1 X0.7 Y27 F1500.0 E30 # Draw the second line
    #G4 P2000 # wait 02 seconds

    M117 Print Start...
    G0 Z0.6 F1500 # Lift A BIT
    G92 E0.0 # Reset Extruder
    
    G0 Z3.0 F1500 # Move Z Axis up little to prevent scratching of Heat Bed




#######################################################
# If you have a power on/off relay 
# This macro is used to shutdown your printer after printing
# It is called by the END_PRINT macro
#######################################################

[gcode_macro _GOODNIGHT]
gcode:
    M106 S255 # max part fan to cool

    M117 Cooling Hotend....
    M109 S49 # reach temp
    M400 # wait
    M107 # kill fan
    M81 # printer power off

    M117 GOODNIGHT...Zzzzzz
    M118 GOODNIGHT...Zzzzzz
    STATUS_OFF


#######################################################
# SYSTEM MACROS DO NOT EDIT
#######################################################
#######################################################
# for use with Klicky Probe, in some rare instances the probe can
# be still attached with the steppers engaged & another print can be started
# without the Klicky Macros checking if the probe is still attached.
# this fixes that!
#######################################################

[gcode_macro _klicky_check]
gcode:
    query_probe
    _probe_state action={ params.ACTION }


[gcode_macro _probe_state]
gcode:
  {% set query_probe_triggered = printer.probe.last_query %}
  {% set action  = params.ACTION|default('') %}
  
  {% if query_probe_triggered %}

  {% else %}
    Dock_Probe_Unlock  
  {% endif %}




#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 21.858
#*# pid_ki = 1.388
#*# pid_kd = 86.064
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 38.206
#*# pid_ki = 1.242
#*# pid_kd = 293.706
