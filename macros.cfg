#####################################################################
#   Macros
#####################################################################
[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    led_cleaning
    CLEAN_NOZZLE
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32
   


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
  
  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SB-leds to homing-mode
  G28                   # Full home (XYZ)
  G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)
  led_heating
  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
   # SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  #SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  #STATUS_LEVELING                          # Sets SB-leds to leveling-mode
  #Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  #G28 Z                                    # Homes Z again after z_tilt_adjust
  led_cleaning
  CLEAN_NOZZLE
  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  quad_gantry_level               # Levels the buildplate via QGL
  G28 Z                           # Homes Z again after QGL
  led_homing
  ##  Uncomment for Klicky auto-z
  #CALIBRATE_Z                                 # Calibrates Z-offset with klicky
  #SET_DISPLAY_TEXT MSG="Z-offset"             # Displays info
  led_cleaning
  CLEAN_NOZZLE
  led_meshing
  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  bed_mesh_calibrate                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp
  CLEAN_NOZZLE
  led_purge
  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 
  G1 X100 E20 F1000                                # Purge line
  VORON_PURGE
  G90                                              # Absolut position

[gcode_macro PID_Tune_Mode_FULL]
gcode: 
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set noz_temp = params.NOZZLE_TARGET|default(250)|float %} #<<<<<<<<<<<<<<<<<<< Edit default nozzle test temp (200)
  {% set bed_temp = params.BED_TARGET|default(90)|float %} #<<<<<<<<<<<<<<<<<<<< Edit default bed test temp (60)
  {% set x_park = printer.toolhead.axis_maximum.x|float / 5 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float / 5 %}

##################################################################

   STATUS_BUSY
   G90 # Use absoulte coordinates

   M117 Hotend AND Bed PID Tune Mode! Long Test!
   M118 Hotend AND Bed PID Tune Mode! Long Test!
   
  {% if "xyz" not in printer.toolhead.homed_axes %}
    STATUS_HOMING
    M117 Homing...
    G28

 {% endif %}    
    
    M400
    G0 X{x_park} Y{y_park} Z5 F9000                    # Goes to center of the bed
    M106 S155
    STATUS_HEATING
    M117 EXTRUDER PID TUNE! PLEASE WAIT!
    M118 EXTRUDER PID TUNE! PLEASE WAIT!
    PID_CALIBRATE HEATER=extruder TARGET={noz_temp}
    M400
    M106 S0
    STATUS_BUSY
    M117 EXTRUDER TEST END! DONT SAVE YET!!
    M118 EXTRUDER TEST END! DONT SAVE YET!!
    G4 P10000
    G0 Z50 F9000
    STATUS_HEATING
    M117 HEAT BED PID TUNE! LONG TEST PLEASE WAIT!
    M118 HEAT BED PID TUNE! LONG TEST PLEASE WAIT!
    PID_CALIBRATE HEATER=heater_bed TARGET={bed_temp}
    M400
    STATUS_BUSY
    M117 HEAT BED TEST END!
    M118 HEAT BED TEST END!
    G4 P10000
    SET_NOZZLE_LEDS_OFF
    M117 ALL TESTS COMPLETE! SAVE_CONFIG NOW!!
    M118 ALL TESTS COMPLETE! SAVE_CONFIG NOW!!


[gcode_macro Auto_Shaper_Calibrate]
gcode: 
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float / 2 %}

##################################################################

  {% if "xyz" not in printer.toolhead.homed_axes %}
    STATUS_HOMING
    M117 Homing...
    G28

 {% endif %}

   STATUS_BUSY
   G0 X{x_park} Y{y_park} Z50 F9000                    # Goes to center of the bed 
   SHAPER_CALIBRATE
   SET_NOZZLE_LEDS_OFF

[gcode_macro CLEAN_NOZZLE]
gcode:
 {% set clean_vars = printer["gcode_macro _CLEAN_VARIABLES"] %}
 {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

 {% if "xyz" not in printer.toolhead.homed_axes %}
    STATUS_HOMING
    M117 Homing...
    G28

 {% endif %}

 STATUS_CLEANING
 G90                                            
 ## Move nozzle to start position
 G0 X{clean_vars.start_x} Y{clean_vars.start_y} F6000
 G0 Z{clean_vars.start_z} F1500

 ## Wipe nozzle
 {% for wipes in range(1, (clean_vars.wipe_qty + 1)) %}
   G0 X{clean_vars.start_x + clean_vars.wipe_dist} F{clean_vars.wipe_spd * 60}
   G0 X{clean_vars.start_x} F{clean_vars.wipe_spd * 60}
 {% endfor %}

 ## Raise nozzle
 G0 Z{clean_vars.raise_distance}
 G0 X{clean_vars.end_position_x} Y{clean_vars.end_position_y} Z{clean_vars.end_position_z} F5000
 STATUS_READY

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:

    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}                                # Gather all object points
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}                                                          # Get bed mesh min from printer.cfg
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}                                                          # Get bed mesh max from printer.cfg
    {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}                                                        # Get probe count from printer.cfg
    {% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}                                                                 # Pull variables from _KAMP_Settings
    {% set verbose_enable = kamp_settings.verbose_enable | abs %}                                                                   # Pull verbose setting from _KAMP_Settings
    {% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}                                                             # Pull probe dockable probe settings from _KAMP_Settings
    {% set attach_macro = kamp_settings.attach_macro | string %}                                                                    # Pull attach probe command from _KAMP_Settings
    {% set detach_macro = kamp_settings.detach_macro | string %}                                                                    # Pull detach probe command from _KAMP_Settings
    {% set mesh_margin = kamp_settings.mesh_margin | float %}                                                                       # Pull mesh margin setting from _KAMP_Settings
    {% set fuzz_amount = kamp_settings.fuzz_amount | float %}                                                                       # Pull fuzz amount setting from _KAMP_Settings
    {% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}                                             # If probe count is only a single number, convert it to 2. E.g. probe_count:7 = 7,7
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}                            # Determine max probe point distance
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}                            # Determine max probe point distance
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}                                                # Set x_min from smallest object x point
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}                                                # Set y_min from smallest object y point
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}                                                # Set x_max from largest object x point
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}                                                # Set y_max from largest object y point

    {% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}                                                          # Set fuzz_range between 0 and fuzz_amount
    {% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}                                                   # Adapt x_min to margin and fuzz constraints
    {% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}                                                   # Adapt y_min to margin and fuzz constraints
    {% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}                                                   # Adapt x_max to margin and fuzz constraints
    {% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}                                                   # Adapt y_max to margin and fuzz constraints

    {% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}                                                               # Compare adjustments to defaults and choose max
    {% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}                                                               # Compare adjustments to defaults and choose max
    {% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}                                                               # Compare adjustments to defaults and choose min
    {% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}                                                               # Compare adjustments to defaults and choose min

    {% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}          # Define probe_count's x point count and round up
    {% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}          # Define probe_count's y point count and round up

    {% if (([points_x, points_y]|max) > 6) %}                                                                                       # 
        {% set algorithm = "bicubic" %}                                                                                             # 
        {% set min_points = 4 %}                                                                                                    # 
    {% else %}                                                                                                                      # Calculate if algorithm should be bicubic or lagrange
        {% set algorithm = "lagrange" %}                                                                                            # 
        {% set min_points = 3 %}                                                                                                    # 
    {% endif %}                                                                                                                     # 

    {% set points_x = [points_x , min_points]|max %}                                                                                # Set probe_count's x points to fit the calculated algorithm
    {% set points_y = [points_y , min_points]|max %}                                                                                # Set probe_count's y points to fit the calculated algorithm
    {% set points_x = [points_x , probe_count[0]]|min %}
    {% set points_y = [points_y , probe_count[1]]|min %}

    {% if verbose_enable == True %}                                                                                                 # If verbose is enabled, print information about KAMP's calculations
        {% if printer.exclude_object.objects != [] %}

            { action_respond_info( "Algorithm: {}.".format(                                                                              
                (algorithm),                                                                                                            
            )) }

            { action_respond_info("Default probe count: {},{}.".format(                                                                  
                (probe_count[0]),                                                                                                       
                (probe_count[1]),                                                                                                       
            )) }

            { action_respond_info("Adapted probe count: {},{}.".format(                                                                  
                (points_x),                                                                                                             
                (points_y),                                                                                                             
            )) }                                                                                                              

            {action_respond_info("Default mesh bounds: {}, {}.".format(                                                                  
                (bed_mesh_min[0],bed_mesh_min[1]),                                                                                      
                (bed_mesh_max[0],bed_mesh_max[1]),                                                                                      
            )) }

            {% if mesh_margin > 0 %}                                                                                                    
                {action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(                                       
                    (mesh_margin),                                                                                                      
                    (mesh_margin),                                                                                       
                )) }                                                                                                                    
            {% else %}                                                                                                                  
                {action_respond_info("Mesh margin is 0, margin not increased.")}                                                        
            {% endif %}                                                                                                                 

            {% if fuzz_amount > 0 %}                                                                                                    
                {action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(                                     
                    (fuzz_amount),                                                                                                      
                )) }                                                                                                                    
            {% else %}                                                                                                                  
                {action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}                                                      
            {% endif %}                                                                                                                 

            { action_respond_info("Adapted mesh bounds: {}, {}.".format(                                                                 
                (adapted_x_min, adapted_y_min),                                                                                         
                (adapted_x_max, adapted_y_max),                                                                                         
            )) }

            {action_respond_info("KAMP adjustments successful. Happy KAMPing!")}

        {% else %}

            {action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
            G4 P5000                                                                                                                # Wait 5 seconds to make error more visible
        {% endif %}

    {% endif %}

    {% if probe_dock_enable == True %}
        {attach_macro}                                                                                                              # Attach/deploy a probe if the probe is stored somewhere outside of the print area
    {% endif %}

    _BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}

    {% if probe_dock_enable == True %}
        {detach_macro}                                                                                                              # Detach/stow a probe if the probe is stored somewhere outside of the print area
    {% endif %}                                                                                                                     # End of verbose




[gcode_macro Stepper_Buzz_Cycle]
gcode:
    STATUS_BUSY
    M117 Stepper X Buzz Cycle in 10 Seconds!
    M118 Stepper X Buzz Cycle in 10 Seconds!
    G4 P5000
    M117 5 Seconds!
    M118 5 Seconds!
    G4 P3000
    M117 Stepper X! READY GO!
    M118 Stepper X! READY GO!
    G4 P2000
    STEPPER_BUZZ STEPPER=stepper_x

    M400
    M117 Stepper Y Buzz Cycle in 10 Seconds
    M118 Stepper Y Buzz Cycle in 10 Seconds
    G4 P5000
    M117 5 Seconds!
    M118 5 Seconds!
    G4 P3000
    M117 Stepper Y! READY GO!
    M118 Stepper Y! READY GO!
    G4 P2000
    STEPPER_BUZZ STEPPER=stepper_y

    M400
    M117 Stepper Z Buzz Cycle in 10 Seconds
    M118 Stepper Z Buzz Cycle in 10 Seconds
    G4 P5000
    M117 5 Seconds!
    M118 5 Seconds!
    G4 P3000
    M117 Stepper Z! READY GO!
    M118 Stepper Z! READY GO!
    G4 P2000
    STEPPER_BUZZ STEPPER=stepper_z

    M400
    M117 Stepper Z1 Buzz Cycle in 10 Seconds
    M118 Stepper Z1 Buzz Cycle in 10 Seconds
    G4 P5000
    M117 5 Seconds!
    M118 5 Seconds!
    G4 P3000
    M117 Stepper Z1! READY GO!
    M118 Stepper Z1! READY GO!
    G4 P2000
    STEPPER_BUZZ STEPPER=stepper_z1 

    M400
    M117 Stepper Z2 Buzz Cycle in 10 Seconds
    M118 Stepper Z2 Buzz Cycle in 10 Seconds
    G4 P5000
    M117 5 Seconds!
    M118 5 Seconds!
    G4 P3000
    M117 Stepper Z2! READY GO!
    M118 Stepper Z2! READY GO!
    G4 P2000
    STEPPER_BUZZ STEPPER=stepper_z2

    M400
    M117 Stepper Z3 Buzz Cycle in 10 Seconds
    M118 Stepper Z2 Buzz Cycle in 10 Seconds
    G4 P5000
    M117 5 Seconds!
    M118 5 Seconds!
    G4 P3000
    M117 Stepper Z3! READY GO!
    M118 Stepper Z3! READY GO!
    G4 P2000
    STEPPER_BUZZ STEPPER=stepper_z3
    

    M117 CYCLE COMPLETE!
    M118 CYCLE COMPLETE!
    G4 P6000
    M117
    STATUS_READY

 

























  